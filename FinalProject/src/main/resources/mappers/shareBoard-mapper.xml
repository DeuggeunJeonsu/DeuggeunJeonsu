<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="shareBoardMapper">

	<resultMap type="Board" id="shareBoard_rm">
		<id property="boardNo" column="BOARD_NO" />

		<result property="boardTitle" column="BOARD_TITLE" />
		<result property="boardContent" column="BOARD_CONTENT" />
		<result property="boardCreateDate" column="CREATE_DT" />
		<result property="boardState" column="BOARD_ST" />
		<result property="boardUpdateDate" column="UPDATE_DT" />
		

		<result property="memberNo" column="MEMBER_NO" />
		<result property="memberNickname" column="MEMBER_NICKNAME" />
		<result property="profileImage" column="PROFILE_IMG" />
		<result property="thumbnail" column="THUMBNAIL" />
		<result property="readCount" column="READ_COUNT" />
		

		<result property="commentCount" column="COMMENT_COUNT" />
		<result property="likeCount" column="LIKE_COUNT" />

		<collection property="imageList" select="selectImageList"
			column="BOARD_NO" javaType="java.util.ArrayList" ofType="BoardImage">
		</collection>

		<collection property="routineList"
			select="selectRoutineList" column="BOARD_NO"
			javaType="java.util.ArrayList" ofType="Routine">
		</collection>

		<collection property="commentList"  
      			  select="selectCommentList"
      			  column="BOARD_NO"
      			  javaType="java.util.ArrayList"
      			  ofType="Comment"> 
      </collection>
      
      <collection property="tagList"
               select="selectHashtagList"
               column="BOARD_NO"
               javaType="java.util.ArrayList"
               ofType="Hashtag">
      </collection>

	</resultMap>
	
	<!-- boardImage resultMap -->
	<resultMap type="BoardImage" id="boardImage_rm">
	  <id property="imageNo" column="IMG_NO"/>
      <result property="imagePath" column="IMG_PATH"/>
      <result property="imageOriginal" column="IMG_ORIGINAL"/>
      <result property="imageReName" column="IMG_RENAME"/>
	  <result property="boardNo" column="BOARD_NO"/>
      <result property="imageLevel" column="IMG_LEVEL"/>
	</resultMap>  
	
	<!-- Routine resultMap -->
	<resultMap type="Routine" id="routine_rm">
		<id property="rtNo" column="RT_NO"/>

		<result property="rtTitle" column="RT_TITLE"/>
		<result property="rtContent" column="RT_CONTENT"/>
		<result property="boardNo" column="BOARD_NO"/>
		<result property="rtLevel" column="RT_LEVEL"/>
	</resultMap>

	<!-- comment resultMap -->
   <resultMap type="Comment" id="comment_rm">
      <id property="commentNo" column="COMMENT_NO"/>
      <result property="commentContent" column="COMMENT_CONTENT"/>
      <result property="commentCreateDate" column="C_CREATE_DT"/>
      <result property="boardNo" column="BOARD_NO"/>
      <result property="memberNo" column="MEMBER_NO"/>
      <result property="commentDeleteFlag" column="COMMENT_DEL_FL"/>
      <result property="parentNo" column="PARENT_NO"/>
      <result property="memberNickname" column="MEMBER_NICKNAME"/>
      <result property="profileImage" column="PROFILE_IMG"/>
   </resultMap>
   
   <!-- Hashtag resultMap -->   
   <resultMap type="Hashtag" id="Hashtag_rm">
      <id property="tagNo" column="TAG_NO" />
      
      <result property="boardNo" column="BOARD_NO" />
      <result property="tagContent" column="TAG_CONTENT" />
   </resultMap>

	<!-- 자유게시판 삭제되지 않은 게시글 수 조회 -->
	<select id="getShareBoardListCount" resultType="_int">
		SELECT COUNT(*)
		FROM BOARD
		WHERE BOARD_ST = 'N'
		AND BOARD_CODE = #{boardCode}
	</select>

	<!-- 특정 게시글 해시태그 조회 -->
	<select id="selectHashtagList" resultMap="Hashtag_rm">
		SELECT * FROM HASHTAG
		JOIN BOARD_HASHTAG USING(TAG_NO)
		WHERE BOARD_NO = #{boardNo}
		ORDER BY TAG_NO
	</select>

	<!-- 공유게시판 게시글 목록 조회 -->
	<select id="selectShareBoardList" resultMap="shareBoard_rm">
		SELECT BOARD_NO,
		BOARD_TITLE, MEMBER_NICKNAME, TO_CHAR(CREATE_DT, 'YY.MM.DD')
		CREATE_DT,PROFILE_IMG,

		(SELECT COUNT(*) FROM "COMMENT" C
		WHERE C.BOARD_NO =
		B.BOARD_NO
		AND C.COMMENT_DEL_FL='N') COMMENT_COUNT,

		(SELECT COUNT(*) FROM LIKE_POST L
		WHERE
		L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,

		(SELECT IMG_PATH || IMG_RENAME
		FROM BOARD_IMG I
		WHERE I.BOARD_NO = B.BOARD_NO
		AND IMG_LEVEL = 0)
		THUMBNAIL

		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		WHERE BOARD_ST =
		'N'
		AND
		BOARD_CODE = #{boardCode}
		ORDER BY BOARD_NO DESC
	</select>

	<!-- 특정게시글 이미지 조회 -->
	<select id="selectImageList" resultMap="boardImage_rm">
		SELECT * FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		ORDER BY IMG_LEVEL
	</select>
	
	<!-- 특정게시글 루틴 조회 -->
	<select id="selectRoutineList" resultMap="routine_rm">
		SELECT * FROM ROUTINE
		WHERE BOARD_NO = #{boardNo}
		ORDER BY RT_LEVEL
	</select>
	

	<!-- 공유게시판 게시글 상세 조회 -->
	<select id="selectShareBoard" resultMap="shareBoard_rm">
		SELECT BOARD_NO,
		BOARD_TITLE, BOARD_CONTENT, BOARD_CODE,
		READ_COUNT, MEMBER_NICKNAME, MEMBER_NO, PROFILE_IMG,
		TO_CHAR(CREATE_DT, 'YY.MM.DD') CREATE_DT,
		(SELECT COUNT(*)
		FROM LIKE_POST L
		WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
		(SELECT COUNT(*)
		FROM "COMMENT" C
		WHERE C.BOARD_NO = B.BOARD_NO
		AND C.COMMENT_DEL_FL='N') COMMENT_COUNT
		FROM BOARD B
		JOIN MEMBER
		USING(MEMBER_NO)
		WHERE BOARD_ST = 'N'
		AND BOARD_CODE = #{boardCode}
		AND
		BOARD_NO = #{boardNo}
	</select>

	<!-- 공유게시판 조회수 증가 -->
	<update id="updateShareBoardReadCount">
		UPDATE BOARD SET
		READ_COUNT = READ_COUNT +1
		WHERE
		BOARD_NO = #{boardNo}
	</update>

	<!-- 공유게시판 좋아요 여부 확인 -->
	<select id="ShareBoardLikeCheck" resultType="_int">
		SELECT COUNT(*) FROM
		LIKE_POST
		WHERE BOARD_NO = #{boardNo}
		AND MEMBER_NO = #{memberNo}
	</select>

	<!-- 공유게시판 좋아요 처리 -->
	<insert id="insertShareBoardLike">
		INSERT INTO LIKE_POST VALUES(#{memberNo}, #{boardNo})
	</insert>

	<!-- 공유게시판 좋아요 취소(삭제) -->
	<delete id="deleteShareBoardLike">
		DELETE FROM LIKE_POST
		WHERE BOARD_NO = #{boardNo}
		AND
		MEMBER_NO = #{memberNo}
	</delete>

	<!-- 공유게시판 좋아요 수 조회 -->
	<select id="countShareBoardLike" resultType="_int">
		SELECT COUNT(*) FROM
		LIKE_POST
		WHERE BOARD_NO = #{boardNo}
	</select>
	
	<insert id="boardInsert" parameterType="Board" useGeneratedKeys="true">
		<selectKey order="BEFORE" resultType="_int" keyProperty="boardNo">
			SELECT SEQ_BOARD_NO.NEXTVAL FROM DUAL
		</selectKey>
			INSERT INTO BOARD
			VALUES( #{boardNo},
					#{boardTitle},
					#{boardContent},
					DEFAULT, DEFAULT, DEFAULT, DEFAULT,
					#{memberNo},
					#{boardCode}	)
	</insert>
	
	<!-- 이미지 여러개 삽입 -->
	<insert id="insertImageList" parameterType="list">
		INSERT INTO BOARD_IMG
		SELECT SEQ_IMG_NO.NEXTVAL, A.*
		FROM(
			<foreach collection="list" item="img" separator=" UNION ALL ">
				SELECT  #{img.imagePath} IMG_PATH,
						#{img.imageOriginal} IMG_ORIGINAL,
						#{img.imageReName} IMG_RENAME,
						#{img.boardNo} BOARD_NO,
						#{img.imageLevel} IMG_LEVEL
				FROM DUAL
			</foreach>
		)A
	</insert>
	
	<!-- 루틴 여러개 삽입 -->
	<insert id="insertRoutineList" parameterType="list">
		INSERT INTO ROUTINE
		SELECT SEQ_IMG_NO.NEXTVAL, A.*
		FROM(
			<foreach collection="list" item="rt" separator=" UNION ALL ">
				SELECT  #{rt.rtTitle} RT_TITLE,
						#{rt.rtContent} RT_CONTENT,
						#{rt.boardNo} BOARD_NO,
						#{rt.rtLevel} RT_LEVEL
				FROM DUAL
			</foreach>
		)A
	</insert>
	
	<!-- 댓글 -->
	<!-- 특정 게시글 댓글 조회(바꿀예정) -->
	<select id="selectCommentList" resultMap="comment_rm">
		WITH CommentHierarchy AS (
		    SELECT COMMENT_NO, COMMENT_CONTENT,
		           TO_CHAR(C_CREATE_DT, 'YYYY.MM.DD') C_CREATE_DT,
		           BOARD_NO, MEMBER_NO, MEMBER_NICKNAME, PROFILE_IMG, PARENT_NO, COMMENT_DEL_FL
		    FROM "COMMENT"
		    JOIN MEMBER USING(MEMBER_NO)
		    WHERE BOARD_NO = #{boardNo}
		    AND COMMENT_DEL_FL = 'N'
		)
		SELECT LEVEL, C.*
		FROM CommentHierarchy C
		START WITH PARENT_NO IS NULL
		CONNECT BY PRIOR COMMENT_NO = PARENT_NO
		ORDER SIBLINGS BY C_CREATE_DT DESC, COMMENT_NO DESC
	</select>
	
	<!-- 이미지 목록 조회 -->
	<select id="selectImageListAll" resultType="string">
		SELECT IMG_RENAME FROM BOARD_IMG
		
	</select>

	<!--게시판 조회수 증가 -->
	<update id="updateBoardReadCount">
		UPDATE BOARD SET
		READ_COUNT = READ_COUNT +1
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!-- 공유게시판 게시글 삭제 -->
	<update id="shareBoardDelete">
		UPDATE BOARD SET
		BOARD_ST = 'Y'
		WHERE BOARD_NO = #{boardNo}
	</update>
	
	<!--삭제된 공유 게시판이미지 삭제 -->
	<delete id="shareBoardImageDelete">
		DELETE FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
	</delete>
	
	<!-- 삭제된 공유게시판 루틴 삭제 -->
	<delete id="routineDelete">
		DELETE FROM ROUTINE
		WHERE BOARD_NO =#{boardNo}
	</delete>
	
	<!-- 공유게시판 HASHTAG 테이블 운동타입 삽입 -->
	<insert id="hashtagInsert" parameterType="Hashtag"
		useGeneratedKeys="true">
		<selectKey order="BEFORE" resultType="_int"
			keyProperty="tagNo">
			SELECT SEQ_TAG_NO.NEXTVAL FROM DUAL
		</selectKey>
		INSERT INTO HASHTAG
		VALUES(#{tagNo}, #{tagContent})
	</insert>
	
	<!-- 공유게시판 BOARD_HASHTAG 테이블 해시태그 삽입 -->
	<insert id="hashtagInsert2" parameterType="Hashtag">
		INSERT INTO
		BOARD_HASHTAG
		VALUES(#{boardNo}, #{tagNo})
	</insert>
	
	<!--  게시글 삭제 시 운동타입 삭제 (HASHTAG) -->
	<delete id="shareBoardHashtagDelete">
		DELETE FROM HASHTAG
		WHERE TAG_NO IN (
		SELECT TAG_NO
		FROM HASHTAG
		JOIN BOARD_HASHTAG USING(TAG_NO)
		JOIN BOARD USING(BOARD_NO)
		WHERE BOARD_NO = #{boardNo}
		)
	</delete>
	
	<!-- 게시글 제목 수정 -->
	<update id="boardUpdate">
		UPDATE BOARD SET
		BOARD_CONTENT=#{boardContent},
		BOARD_TITLE =#{boardTitle}
		WHERE BOARD_CODE =#{boardCode}
		AND BOARD_NO = #{boardNo}
	</update>
	
	<!-- 이미지 업데이트 -->
	<update id="imageUpdate">
		UPDATE BOARD_IMG SET
		IMG_PATH = #{imagePath},
		IMG_ORIGINAL = #{imageOriginal},
		IMG_RENAME = #{imageReName}
		WHERE BOARD_NO = #{boardNo}
		AND IMG_LEVEL= #{imageLevel}
	</update>
	
	<!-- 이미지 삽입 -->
	<insert id="insertImage">
		INSERT INTO BOARD_IMG
		VALUES(SEQ_IMG_NO.NEXTVAL, #{imagePath},#{imageOriginal}, #{imageReName}
			,#{boardNo},#{imageLevel})
	</insert>
	
	<!-- 루틴 수정 -->
	<update id="routineUpdate">
		UPDATE ROUTINE SET
		RT_TITLE = #{rtTitle},
		RT_CONTENT = #{rtContent}
		WHERE BOARD_NO = #{boardNo}
		AND RT_LEVEL= #{rtLevel}
	</update>
	
	
	<!-- 루틴 삽입 -->
	<insert id="insertRoutine">
		INSERT INTO ROUTINE
		VALUES(SEQ_IMG_NO.NEXTVAL, #{rtTitle}, #{rtContent}
			,#{boardNo},#{rtLevel})
	</insert>
	
	<!-- 삭제되지 않고 검색 조건이 일치하는 게시글 수 조회 -->
	<select id="getShareBoardListCount_search" resultType="_int">
		SELECT COUNT(*) FROM BOARD
		WHERE BOARD_ST = 'N'
		AND BOARD_CODE = #{boardCode}
		
		<choose>
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
			</when>
			
			<when test='key == "f"'>
				AND MEMBER_NO IN (SELECT FOLLOWER_NO FROM FOLLOW WHERE MEMBER_NO = #{loginMemberNo})
			</when>
			
			<when test='key == "ht"'>
				AND BOARD_NO IN (
            		SELECT BOARD_NO FROM BOARD_HASHTAG
            		JOIN HASHTAG USING(TAG_NO)
            		WHERE TAG_CONTENT LIKE '%${query}%')
			</when>
		</choose>
		
	</select>
	
	<!-- 루틴공유 게시글 상세 검색 -->
	<select id="selectShareBoardList_search" resultMap="shareBoard_rm">
		SELECT BOARD_NO, BOARD_TITLE, MEMBER_NICKNAME,
		TO_CHAR(CREATE_DT, 'YY.MM.DD') CREATE_DT, PROFILE_IMG,
		(SELECT COUNT(*) FROM "COMMENT" C
		
		WHERE C.BOARD_NO = B.BOARD_NO) COMMENT_COUNT,
		(SELECT COUNT(*) FROM LIKE_POST L
		
		WHERE L.BOARD_NO = B.BOARD_NO) LIKE_COUNT,
		
		(SELECT IMG_PATH || IMG_RENAME
		FROM BOARD_IMG I
		WHERE I.BOARD_NO = B.BOARD_NO
		AND IMG_LEVEL = 0)THUMBNAIL
		
		FROM "BOARD" B
		JOIN "MEMBER" USING(MEMBER_NO)
		
		WHERE BOARD_ST = 'N'
		AND BOARD_CODE = #{boardCode}

		<choose>
			<when test='key == "tc"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
				ORDER BY BOARD_NO DESC
			</when>
			
			<when test='key == "f"'>
			AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
				AND MEMBER_NO IN (SELECT FOLLOWER_NO FROM FOLLOW WHERE MEMBER_NO = #{loginMemberNo})
				ORDER BY BOARD_NO DESC
			</when>
			
			<when test='key == "r"'>
			AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
				ORDER BY BOARD_NO DESC
			</when>
			
			<when test='key == "p"'>
				AND (BOARD_TITLE LIKE '%${query}%' OR BOARD_CONTENT LIKE '%${query}%')
				ORDER BY LIKE_COUNT DESC
			</when>
			
			<when test='key == "ht"'>
				AND BOARD_NO IN (
            		SELECT BOARD_NO FROM BOARD_HASHTAG
            		JOIN HASHTAG USING(TAG_NO)
            		WHERE TAG_CONTENT LIKE '%${query}%')
            	ORDER BY BOARD_NO DESC	
			</when>
		</choose>

	</select>
	
	<!-- 이미지 삭제 -->
	<delete id="imgDelete">
		DELETE FROM BOARD_IMG
		WHERE BOARD_NO = #{boardNo}
		AND IMG_NO IN (${deleteImgList})
	</delete>
	
	<!-- 루틴 삭제 -->
	<delete id="rtDelete">
		DELETE FROM ROUTINE
		WHERE BOARD_NO = #{boardNo}
		AND RT_NO IN (${deleteList})
	</delete>
	
	
</mapper>
